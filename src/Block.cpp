#include "Block.h"
#include "Config.h"
#include "RenderManager.h"

namespace block
{

	bool levels[config::maxLevels][maxWidth][maxHeight] = {

		{
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0},
		},
		{
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
		},
		{
		{1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
		{1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0},
		},
		{
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		},
		{
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		},
		{
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
		{0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0},
		{0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0},
		},
		{
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0},
		},
		{
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
		{1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0},
		{1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0},
		{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
		},
		{
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
		},
		{
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
		{1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1},
		{0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0},
		},
	};


	void initArray(Block blocks[maxWidth][maxHeight], int level)
	{
		utilities::Vector2 initialPos = { size.x / 2, config::gameHeight - size.y * 2 };
		utilities::Vector2 position = { initialPos.x, initialPos.y};
		if (level >= config::maxLevels)
			level = config::maxLevels - 1;


		for (int i = 0; i < maxWidth; i++)
		{
			for (int j = 0; j < maxHeight; j++)
			{
				blocks[i][j].state = (State)levels[level][i][j];

				blocks[i][j].position = position;
				position = { position.x, position.y - size.y};
				blocks[i][j].hasGlass = false;
			}
			position.y = initialPos.y;
			position.x += size.x;
		}
	}

	void setGlasses(Block blocks[maxWidth][maxHeight], int levelGlasses)
	{
		int glassesCounter = 0;
		while (glassesCounter < levelGlasses)
		{
			for (int i = 0; i < maxWidth; i++)
			{
				for (int j = 0; j < maxHeight; j++)
				{
					if (rand() % 1000 < 10 && glassesCounter < levelGlasses && !blocks[i][j].hasGlass && blocks[i][j].state == State::Undamaged)
					{
						blocks[i][j].hasGlass = true;
						glassesCounter++;
					}
				}
			}
		}
	}

	bool areAllBlocksDestroyed(Block blocks[maxWidth][maxHeight])
	{
		for (int i = 0; i < maxWidth; i++)
		{
			for (int j = 0; j < maxHeight; j++)
			{
				if (blocks[i][j].state == State::Undamaged)
					return false;
			}
		}
		return true;
	}

	void drawArray(Block blocks[maxWidth][maxHeight])
	{
		utilities::Color color;
		for (int i = 0; i < maxWidth; i++)
		{

			for (int j = 0; j < maxHeight; j++)
			{
				if (blocks[i][j].state == State::Undamaged)
				{
					if ((i + j) % 2)
						color = { 1,1,1,1 };
					else
						color = { 0.8,0.8,0.8,1 };
					render::drawRectangle(blocks[i][j].position, size, color);

				}
			}
		}
	}
}